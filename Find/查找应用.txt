这些查找技术：数组、二叉树、红黑树、哈希表什么的, 表达的都是 通过关键码 寻找对应的一整个数据项，而关键码只是数据项中的一部分
而我们通过特定的存储结构，使得搜索关键码的效率大大提高

我在实现的时候，是直接保存整数值（int key）的
实际上我们还需要存储关键码对应的数据项 key-value
struct data{  //一个 数据项
T key; //关键码
T dataItem;---除了key之外的数据集
}
只需调整一下那些查找实现算法，和存储数据即可
比如树中的节点data域存储的是整个数据项，
但比较的时候，取出data中的key就行了

还有些地方使用字符串作为key，实际上字符串也是可以比较的，不是吗,strcmp
java中，对象也是可以比较的
而key的比较不能直接算术判断了，而是调用相应的比较器，字符串有字符串的比较，对象有对象的比较，数有数的比较
比较器能保证大小顺序，也能证明数据的重复

实际上这些查找算法所实现的存储结构对于 键值对(key,value) 存储很适用， java中的treeMap即是用红黑树实现的
map.put(1,obj); --> key = 1, dataItem = obj
又能保持有序，又能保证不重复

java 集合的底层数据结构

而 treeSet的底层也是红黑树，实际上它调用的就是treeMap
map中有指定的key，set则是整个元素就是一个key， 无非就是有没有value的区别
set.add(obj)--> key = obj,  其中obj必然可以比较， 而value则不需要储存

hashMap、hashSet则是哈希表实现的，java中存在相应的hashCode方法计算key的散列值

java中的hashMap使用顺序数组保存，而解决冲突使用链表法，通过对比key是否相同，如果相同则替换value
hashSet的底层就是hashMap


java 集合总结： 自己想一下底层数据结构


1:集合
    Collection(单列集合)
        List(有序,可重复)
            ArrayList
                底层数据结构是数组,查询快,增删慢
                线程不安全,效率高
            Vector
                底层数据结构是数组,查询快,增删慢
                线程安全,效率低
            LinkedList
                底层数据结构是链表,查询慢,增删快
                线程不安全,效率高
        Set(无序,唯一)
            HashSet
                底层数据结构是哈希表。
                哈希表依赖两个方法：hashCode()和equals()
                执行顺序：
                    首先判断hashCode()值是否相同
                        是：继续执行equals(),看其返回值
                            是true:说明元素重复，不添加
                            是false:就直接添加到集合
                        否：就直接添加到集合
                最终：
                    自动生成hashCode()和equals()即可

                LinkedHashSet (额外提供一个双向链表保存数据，主要记录数据的加入顺序，为了利用空间，可以指向原本在哈希表-链表中的节点)
                    底层数据结构由链表和哈希表组成。
                    由链表保证元素有序。
                    由哈希表保证元素唯一。
            TreeSet
                底层数据结构是红黑树。(是一种自平衡的二叉树)
                如何保证元素唯一性呢?
                    根据比较的返回值是否是0来决定
                如何保证元素的排序呢?
                    两种方式
                        自然排序(元素具备比较性)
                            让元素所属的类实现Comparable接口
                        比较器排序(集合具备比较性)
                            让集合接收一个Comparator的实现类对象
    Map(双列集合)
        A:Map集合的数据结构仅仅针对键有效，与值无关。
        B:存储的是键值对形式的元素，键唯一，值可重复。

        HashMap
            底层数据结构是哈希表。线程不安全，效率高
                哈希表依赖两个方法：hashCode()和equals()
                执行顺序：
                    首先判断hashCode()值是否相同
                        是：继续执行equals(),看其返回值
                            是true:说明元素重复，不添加
                            是false:就直接添加到集合
                        否：就直接添加到集合
                最终：
                    自动生成hashCode()和equals()即可
            LinkedHashMap
                底层数据结构由链表和哈希表组成。
                    由链表保证元素有序。
                    由哈希表保证元素唯一。
        Hashtable
            底层数据结构是哈希表。线程安全，效率低
                哈希表依赖两个方法：hashCode()和equals()
                执行顺序：
                    首先判断hashCode()值是否相同
                        是：继续执行equals(),看其返回值
                            是true:说明元素重复，不添加
                            是false:就直接添加到集合
                        否：就直接添加到集合
                最终：
                    自动生成hashCode()和equals()即可
        TreeMap
            底层数据结构是红黑树。(是一种自平衡的二叉树)
                如何保证元素唯一性呢?
                    根据比较的返回值是否是0来决定
                如何保证元素的排序呢?
                    两种方式
                        自然排序(元素具备比较性)
                            让元素所属的类实现Comparable接口
                        比较器排序(集合具备比较性)
                            让集合接收一个Comparator的实现类对象

2.关于集合选取原则
    是否是键值对象形式:
        是：Map
            键是否需要排序:
                是：TreeMap
                否：HashMap
            不知道，就使用HashMap。

        否：Collection
            元素是否唯一:
                是：Set
                    元素是否需要排序:
                        是：TreeSet
                        否：HashSet
                    不知道，就使用HashSet

                否：List
                    要安全吗:
                        是：Vector
                        否：ArrayList或者LinkedList
                            增删多：LinkedList
                            查询多：ArrayList
                        不知道，就使用ArrayList
            不知道，就使用ArrayList